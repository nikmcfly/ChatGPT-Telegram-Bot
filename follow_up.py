# follow_up.py
import asyncio
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from md2tgmd.src.md2tgmd import escape

async def schedule_followup(user_id: int, language: str, context, chat_id: int):
    """Schedule 24h follow-up message"""
    
    followup_messages = {
        'kk': """üëã –†–µ–∑—é–º–µ“£—ñ–∑–¥—ñ –∂–∞“£–∞—Ä—Ç—Ç—ã“£—ã–∑ –±–∞?

üí° **–ö–µ“£–µ—Å—Ç–µ—Ä:**
- LinkedIn, HeadHunter, Naim.kz –ø—Ä–æ—Ñ–∏–ª—å–¥–µ—Ä—ñ–Ω –∂–∞“£–∞—Ä—Ç—ã“£—ã–∑
- –ñ–∞“£–∞ –¥–∞“ì–¥—ã–ª–∞—Ä—ã“£—ã–∑–¥—ã “õ–æ—Å—É–¥—ã “±–º—ã—Ç–ø–∞“£—ã–∑
- –ö”ô—Å—ñ–±–∏ —Å—É—Ä–µ—Ç—Ç—ñ —Ä–µ–∑—é–º–µ–≥–µ “õ–æ—Å—ã“£—ã–∑

üì∏ –ö”ô—Å—ñ–±–∏ —Å—É—Ä–µ—Ç ”ô–ª—ñ –¥–µ –∫–µ—Ä–µ–∫ –±–æ–ª—Å–∞ - 990‚Ç∏""",

        'ru': """üëã –û–±–Ω–æ–≤–∏–ª–∏ —Å–≤–æ–µ —Ä–µ–∑—é–º–µ?

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
- –û–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª–∏ –≤ LinkedIn, HeadHunter, Naim.kz
- –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏
- –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ

üì∏ –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ - 990‚Ç∏""",

        'en': """üëã Updated your resume?

üí° **Recommendations:**
- Update your LinkedIn, HeadHunter, Naim.kz profiles
- Don't forget to add new skills
- Add a professional photo

üì∏ Still need a professional photo? - 990‚Ç∏"""
    }
    
    # Schedule for 24 hours later
    await asyncio.sleep(86400)  # 24 hours
    
    message = followup_messages.get(language, followup_messages['ru'])
    
    # Create AI photos button
    from resume_handler import create_ai_photos_button
    photo_button = create_ai_photos_button(user_id, language)
    
    try:
        # Send follow-up message with photo button
        await context.bot.send_message(
            chat_id=chat_id,
            text=escape(message, italic=False),
            parse_mode='MarkdownV2',
            reply_markup=photo_button
        )
        
        # Track follow-up sent
        from analytics import analytics
        await analytics.log_event({
            'event': 'followup_sent',
            'user_id': user_id,
            'language': language,
            'timestamp': datetime.now().isoformat()
        })
    except Exception as e:
        print(f"Failed to send follow-up message: {e}")

def schedule_followup_task(user_id: int, language: str, context, chat_id: int):
    """Schedule follow-up message as a background task"""
    asyncio.create_task(schedule_followup(user_id, language, context, chat_id))