# resume_handler_improved.py
from resume_detector_improved import ImprovedResumeDetector as ResumeDetector
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import TelegramError, TimedOut, NetworkError
from md2tgmd.src.md2tgmd import escape
from utils.scripts import GetMesageInfo, Document_extract
from config import Users, get_robot, RESUME_PROMPTS, AI_PHOTOS_URL
import utils.decorators as decorators
import logging
import asyncio
from typing import Optional

logger = logging.getLogger(__name__)

resume_detector = ResumeDetector()

# Error messages in multiple languages
ERROR_MESSAGES = {
    'file_read_error': {
        'kk': "‚ùå –§–∞–π–ª–¥—ã –æ“õ—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. –ë–∞—Å“õ–∞ —Ñ–æ—Ä–º–∞—Ç—Ç—ã “õ–æ–ª–¥–∞–Ω—ã–ø –∫”©—Ä—ñ“£—ñ–∑.",
        'ru': "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç.",
        'en': "‚ùå Failed to read the file. Please try another format."
    },
    'analysis_error': {
        'kk': "üòî –ö–µ—à—ñ—Ä—ñ“£—ñ–∑, —Ä–µ–∑—é–º–µ–Ω—ñ —Ç–∞–ª–¥–∞—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã. –ë—ñ—Ä–∞–∑–¥–∞–Ω –∫–µ–π—ñ–Ω “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.",
        'ru': "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∑—é–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        'en': "üòî Sorry, an error occurred while analyzing the resume. Please try again later."
    },
    'network_error': {
        'kk': "üåê –ñ–µ–ª—ñ “õ–∞—Ç–µ—Å—ñ. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –±–∞–π–ª–∞–Ω—ã—Å—ã–Ω —Ç–µ–∫—Å–µ—Ä—ñ–ø, “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.",
        'ru': "üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        'en': "üåê Network error. Please check your connection and try again."
    },
    'timeout_error': {
        'kk': "‚è±Ô∏è –¢–∞–ª–¥–∞—É —É–∞“õ—ã—Ç—ã ”©—Ç–µ “±–∑–∞“õ“õ–∞ —Å–æ–∑—ã–ª–¥—ã. “ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.",
        'ru': "‚è±Ô∏è –ê–Ω–∞–ª–∏–∑ –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        'en': "‚è±Ô∏è Analysis took too long. Please try again."
    },
    'api_error': {
        'kk': "ü§ñ AI “õ—ã–∑–º–µ—Ç—ñ–º–µ–Ω –±–∞–π–ª–∞–Ω—ã—Å –æ—Ä–Ω–∞—Ç—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. –ë—ñ—Ä–∞–∑–¥–∞–Ω –∫–µ–π—ñ–Ω “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.",
        'ru': "ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å AI —Å–µ—Ä–≤–∏—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        'en': "ü§ñ Failed to connect to AI service. Please try later."
    },
    'file_too_large': {
        'kk': "üìè –§–∞–π–ª —Ç—ã–º “Ø–ª–∫–µ–Ω. 10MB-—Ç–∞–Ω –∫—ñ—à—ñ —Ñ–∞–π–ª –∂“Ø–∫—Ç–µ“£—ñ–∑.",
        'ru': "üìè –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ 10MB.",
        'en': "üìè File is too large. Please upload a file smaller than 10MB."
    }
}

async def extract_document_text(document):
    """Extract text from document using existing extraction logic"""
    # This will use the existing Document_extract function
    file_url = await document.get_file()
    file_path = file_url.file_path
    text = await Document_extract(file_path, None, "gpt")
    return text

async def track_resume_analysis(user_id: int, language: str):
    """Track resume analysis event"""
    from analytics_improved import analytics
    await analytics.track_resume_analysis(user_id, language)

async def track_user_start(user_id: int, language: str):
    """Track user start event"""
    from analytics_improved import analytics
    await analytics.track_user_start(user_id, language)

def create_ai_photos_button(user_id: int, language: str) -> InlineKeyboardMarkup:
    """Create localized ai photos button"""
    button_texts = {
        'kk': "üì∏ –ö”ô—Å—ñ–±–∏ —Å—É—Ä–µ—Ç –∞–ª—É - 990‚Ç∏",
        'ru': "üì∏ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ - 990‚Ç∏",
        'en': "üì∏ Get Professional Photo - 990‚Ç∏"
    }
    
    utm_url = f"{AI_PHOTOS_URL}?utm_source=resumebek&utm_medium=telegram&user_id={user_id}&lang={language}&promo=STUDENT"
    
    button_text = button_texts.get(language, button_texts['ru'])
    keyboard = [[InlineKeyboardButton(button_text, url=utm_url)]]
    
    return InlineKeyboardMarkup(keyboard)

async def get_resume_analysis_with_retry(text: str, language: str, convo_id: str, 
                                        max_retries: int = 3) -> Optional[str]:
    """Get GPT analysis with retry logic"""
    prompt = RESUME_PROMPTS.get(language, RESUME_PROMPTS['ru'])
    
    robot, role, api_key, api_url = get_robot(convo_id)
    engine = Users.get_config(convo_id, "engine")
    
    for attempt in range(max_retries):
        try:
            response = await asyncio.wait_for(
                robot.ask_async(
                    prompt.format(resume_text=text[:3000]),  # Limit text length
                    convo_id=convo_id,
                    model=engine,
                    api_url=api_url,
                    api_key=api_key,
                    pass_history=0
                ),
                timeout=60.0  # 60 second timeout
            )
            
            # Add photo CTA to response
            cta_texts = {
                'kk': "\n\nüì∏ **–†–µ–∑—é–º–µ“£—ñ–∑–≥–µ –∫”ô—Å—ñ–±–∏ —Å—É—Ä–µ—Ç “õ–æ—Å—ã“£—ã–∑!**\n–°—Ç—É–¥–µ–Ω—Ç –ø–∞–∫–µ—Ç—ñ: 990‚Ç∏ (80% –∂–µ“£—ñ–ª–¥—ñ–∫)\nüëÜ –¢–∞–ø—Å—ã—Ä—ã—Å –±–µ—Ä—É “Ø—à—ñ–Ω —Ç”©–º–µ–Ω–¥–µ–≥—ñ –±–∞—Ç—ã—Ä–º–∞–Ω—ã –±–∞—Å—ã“£—ã–∑",
                'ru': "\n\nüì∏ **–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –∫ —Ä–µ–∑—é–º–µ!**\n–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –ø–∞–∫–µ—Ç: 990‚Ç∏ (—Å–∫–∏–¥–∫–∞ 80%)\nüëÜ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–∫–∞–∑–∞",
                'en': "\n\nüì∏ **Add a professional photo to your resume!**\nStudent Package: 990‚Ç∏ (80% discount)\nüëÜ Click the button below to order"
            }
            
            cta = cta_texts.get(language, cta_texts['ru'])
            return response + cta
            
        except asyncio.TimeoutError:
            logger.warning(f"Timeout on attempt {attempt + 1} for resume analysis")
            if attempt < max_retries - 1:
                await asyncio.sleep(2 ** attempt)  # Exponential backoff
            else:
                raise
                
        except Exception as e:
            logger.error(f"Error on attempt {attempt + 1} for resume analysis: {e}")
            if attempt < max_retries - 1:
                await asyncio.sleep(2 ** attempt)  # Exponential backoff
            else:
                raise
    
    return None

def get_error_message(error_type: str, language: str) -> str:
    """Get localized error message"""
    return ERROR_MESSAGES.get(error_type, {}).get(language, ERROR_MESSAGES[error_type]['ru'])

@decorators.GroupAuthorization
@decorators.Authorization
async def handle_document_resumebek_improved(update, context):
    """Improved document handler with better error handling"""
    _, _, image_url, chatid, _, _, _, message_thread_id, convo_id, file_url, _, voice_text = await GetMesageInfo(update, context)
    
    # Default language for error messages
    user_language = 'ru'
    
    try:
        # Check file size (Telegram limit is 20MB, but we'll limit to 10MB for processing)
        if update.message.document and update.message.document.file_size > 10 * 1024 * 1024:
            await update.message.reply_text(
                get_error_message('file_too_large', user_language)
            )
            return
        
        # Extract text from document
        if file_url:
            try:
                robot, role, api_key, api_url = get_robot(convo_id)
                engine = Users.get_config(convo_id, "engine")
                from aient.src.aient.core.utils import get_engine
                engine_type, _ = get_engine({"base_url": api_url}, endpoint=None, original_model=engine)
                if robot.__class__.__name__ == "chatgpt":
                    engine_type = "gpt"
                
                text = await asyncio.wait_for(
                    Document_extract(file_url, image_url, engine_type),
                    timeout=30.0  # 30 second timeout for file extraction
                )
                
            except asyncio.TimeoutError:
                await update.message.reply_text(
                    get_error_message('timeout_error', user_language)
                )
                return
                
            except Exception as e:
                logger.error(f"Failed to extract text from document: {e}")
                await update.message.reply_text(
                    get_error_message('file_read_error', user_language)
                )
                return
        else:
            await update.message.reply_text(
                get_error_message('file_read_error', user_language)
            )
            return
        
        if not text or len(text.strip()) < 50:  # Minimum text length check
            await update.message.reply_text(
                get_error_message('file_read_error', user_language)
            )
            return
        
        # Check if it's a resume
        if not resume_detector.is_resume(text):
            # Fall back to regular document handling
            robot.add_to_conversation(text, role, convo_id)
            if Users.get_config(convo_id, "FILE_UPLOAD_MESS"):
                from utils.i18n import strings
                from config import get_current_lang
                message = await context.bot.send_message(
                    chat_id=chatid, 
                    message_thread_id=message_thread_id, 
                    text=escape(strings['message_doc'][get_current_lang(convo_id)]), 
                    parse_mode='MarkdownV2', 
                    disable_web_page_preview=True
                )
                from bot import delete_message
                await delete_message(update, context, [message.message_id])
            return
        
        # Detect language
        detected_lang, confidence = resume_detector.detect_language(text)
        user_language = detected_lang  # Update language for error messages
        
        logger.info(f"Resume detected for user {update.effective_user.id}, language: {detected_lang} (confidence: {confidence}%)")
        
        # Show processing message
        processing_messages = {
            'kk': "üîÑ –†–µ–∑—é–º–µ“£—ñ–∑–¥—ñ —Ç–∞–ª–¥–∞–ø –∂–∞—Ç—ã—Ä–º—ã–Ω... –ë“±–ª 15-30 —Å–µ–∫—É–Ω–¥ –∞–ª–∞–¥—ã.",
            'ru': "üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ —Ä–µ–∑—é–º–µ... –≠—Ç–æ –∑–∞–π–º–µ—Ç 15-30 —Å–µ–∫—É–Ω–¥.",
            'en': "üîÑ Analyzing your resume... This will take 15-30 seconds."
        }
        
        processing_msg = await update.message.reply_text(
            processing_messages.get(detected_lang, processing_messages['ru'])
        )
        
        try:
            # Get resume analysis with retry logic
            analysis = await get_resume_analysis_with_retry(text, detected_lang, convo_id)
            
            if not analysis:
                raise Exception("Failed to get analysis after retries")
            
            # Create ai photos button
            photo_button = create_ai_photos_button(update.effective_user.id, detected_lang)
            
            # Send analysis with photo CTA
            await processing_msg.edit_text(
                escape(analysis, italic=False),
                parse_mode='MarkdownV2',
                reply_markup=photo_button
            )
            
            # Track analytics
            await track_resume_analysis(update.effective_user.id, detected_lang)
            
            # Schedule follow-up message with persistence
            try:
                from follow_up_persistent import schedule_followup_task_persistent
                schedule_followup_task_persistent(update.effective_user.id, detected_lang, context, chatid)
            except Exception as e:
                logger.error(f"Failed to schedule follow-up: {e}")
                # Don't fail the whole process if follow-up scheduling fails
            
        except asyncio.TimeoutError:
            await processing_msg.edit_text(
                get_error_message('timeout_error', user_language)
            )
            logger.error(f"Timeout during resume analysis for user {update.effective_user.id}")
            
        except NetworkError:
            await processing_msg.edit_text(
                get_error_message('network_error', user_language)
            )
            logger.error(f"Network error during resume analysis for user {update.effective_user.id}")
            
        except Exception as e:
            await processing_msg.edit_text(
                get_error_message('api_error', user_language)
            )
            logger.error(f"Failed to analyze resume for user {update.effective_user.id}: {e}")
            
    except TelegramError as e:
        logger.error(f"Telegram error in resume handler: {e}")
        # Can't send error message if Telegram is having issues
        
    except Exception as e:
        logger.error(f"Unexpected error in resume handler: {e}")
        try:
            await update.message.reply_text(
                get_error_message('analysis_error', user_language)
            )
        except:
            pass  # If we can't even send an error message, just log it